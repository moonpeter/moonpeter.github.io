{"pages":[],"posts":[{"title":"lotto : 사이드프로젝트 시작!","text":"사이드 프로젝트 시작!","link":"/2020/05/27/lotto-%E1%84%89%E1%85%A1%E1%84%8B%E1%85%B5%E1%84%83%E1%85%B3%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A6%E1%86%A8%E1%84%90%E1%85%B3-%E1%84%89%E1%85%B5%E1%84%8C%E1%85%A1%E1%86%A8/"},{"title":"TIL : 면접 예상 질문","text":"SSH(시큐어 셀) 네트워크 상의 다른 컴퓨터에 로그인 하거나 원격 시스템에서 명령을 실행하고 다른 시스템으로 파일을 복사할 수 있도록 해주는 응용 프로그램 또는 그 프로토콜 데이터 전송 ex) 깃허브 푸쉬할 때 원격 제어 ex) AWS 인스턴스 서버에 접속하여 해당 머신에 명령을 내리기 위해 SSH를 사용하는 이유 ==&gt; “보안” =&gt; Private Key(암호화된 메시지를 복호화) / Public Key(암호화가능, 복호화는 불가) HTTP / HTTPS HTTP : 웹브라우저와 서버간의 웹페이지와 같은 자원을 주고 받을 때 쓰는 통신 규약 HTTPS : HTTP + SSL프로토콜 =&gt; 보안이 강화된 HTTP CA업체를 통하여 인증서(Private Key)를 발급 받음 ex) Let’s Encrypt 프로토콜컴퓨터끼리 정보를 주고 받기 위한 일종의 규칙이나 약속을 의미 ex) TPC, IP, HTTP, FTP DNS(도메인 네임 시스템)호스트의 도메인 이름을 호스트이 네트워크 주소로 바꾸거나 그 반대의 변황르 수행 할 수 있도록 하기 위해 개발되었다. 특정 컴퓨터의 주소를 찾기 위해, 사람이 이해하기 쉬운 도메인 이름을 숫자로 된 식별 번호로 변환해 준다. 보안(권한, 개인키)페이징 로직에 대한 이해Serverless클라우드 접근 권한에 대한 이해S3와 같은 외부데이터 저장소화 내부 파일 시스템의 차이Docker / Kubernetes Docker : 컨테이너 기반의 오픈소스 가상화 플랫폼 다양한 프로그램, 실행환경을 컨테이너로 추상화하고 동일한 인터페이스를 제공하여 프로그램의 배포 및 관리를 단순화해줌 기종의 가상화 방식은 OS를 가상화함 =&gt; 무겁고 느림 도커는 하나의 서버에 어려개의 컨테이너는 사용 =&gt; 서로 영향을 미치지 않으며, 독립적으로 실행 가능 Image : 컨테이너 실행에 필요한 파일과 설정값 등을 포함하고 있음 레이어 저장 방식을 사용함 Kubernetes : 컨테이너를 쉽고 빠르게 배포/확장하고 관리를 자동화해주는 오픈소스 플랫폼 CI/CD CI : 지속적 통합 = build / test CD : 지속적 제공/배포 = deploy 스케일 업과 스케일 아웃에 대한 차이 이해 스케일 아웃 : 서버를 여러대 추가하여 시스템을 확장하는 방법 부하를 균등하게 해주는 “로드벨런싱”이 필수 장점 : 서버 한대가 다운되면 다른 서버로 서비스 제공 가능 단점 : 모든 서버가 동일한 데이터를 가지고 있어야 함 데이터 변화가 적은 “웹서버”에 적합 스케일 업 : 서버에 CPU나 RAM를 추가하거나 고성능의 부품, 서버로 교체하는 방법 서버 한대에 모든 부하가 집중 데이터베이스 서버에 적합한 방식 로드 벨런서 로드밸런서는 서버에 가해지는 부하(=로드)를 분산(=밸런싱)해주는 장치 또는 기술을 통칭합니다. 클라이언트와 서버풀(Server Pool, 분산 네트워크를 구성하는 서버들의 그룹) 사이에 위치하며, 한 대의 서버로 부하가 집중되지 않도록 트래픽을 관리해 각각의 서버가 최적의 퍼포먼스를 보일 수 있도록 합니다. 라운드로빈 방식(Round Robin Method) 가중 라운드로빈 방식(Weighted Round Robin Method) IP 해시 방식(IP Hash Method) 최소 연결 방식(Least Connection Method) 최소 리스폰타임(Least Response Time Method) 프록시 서버에 대한 이해 클라이언트와 서버 사이에서 데이터를 전달해 주는 서버. 웹 캐시 기능이 있는 경우가 많으며, 방식에 따라 클라이언트의 [IP 주소](https://namu.wiki/w/IP 주소)가 서버에게 노출될 수도 있고 아닐 수도 있다. 설치 목적은 웹서핑을 비롯한 인터넷 속도 향상 TDD(테스트 주도 개발)Agile 개발 방식캐시컴퓨터 과학에서 데이터나 값을 미리 복사해 놓은 임시 장소를 가리킨다. 캐시는 캐시의 접근 시간에 비해 원래 데이터를 접근하는 시간이 오래 걸리는 경우나 값을 다시 계산하는 시간을 절약하고 싶은 경우에 사용 Cookie &amp; Session Cookie Session 저장위치 Client Server 저장형식 Text Object 만료시점 쿠키 저장시 설정 (설정 없으면 브라우저 종료 시) 정확한 시점 모름 리소스 클라이언트의 리소스 서버의 리소스 용량제한 한 도메인 당 20개, 한 쿠키당 4KB 제한없음 URI과 URL URI에는 URL,URN이 포함되어 있다. URL은 URI이지만, URI는 URL이 아니다. URL은 인터넷 상의 자원 위치를 나타냄 URI는 인터넷 상의 자원을 식별하기 위한 문자열의 구성 REST API 첫 번째, URI는 정보의 자원을 표현해야 한다. 두 번째, 자원에 대한 행위는 HTTP Method(GET, POST, PUT, DELETE)로 표현한다. 자료구조 자료구조는 효율적인 접근 및 수정을 가능케 하는 자료의 조직, 관리, 저장 하기 위해 사용하는 추상적인 개념입니다. 자료는 보통 수와 문자를 다루며, 이런 자료를 구조화 시킨 것이 자료 구조입니다. stack LIFO(Last In, First Out) : 후입선출 항상 가장 상위 원소를 호출하거나 삭제하므로 가장 먼저 들어온 것이 가장 나중에 나오는 선입후출 구조를 가지고 있습니다. undo, 되돌리기 (Ctrl+Z) 후위표기법(postfix notation) 수식 계산 괄호 체크 메모리 연산, 재귀함수 호출 queue &amp; deque FIFO (First In, First Out) : 선입선출 가장 먼저 들어온 것이 가장 먼저 나오는 선입선출 구조를 가지고 있습니다. OS Scheduling 우선순위가 같은 작업 (Print) 메시지 큐(Mesage Queue) deque = stack + queue graph 관계를 표현하기 위해 필요하고 사용하는 자료구조입니다. 이런 그래프는 관계 표현을 위해 정점(Node, Vertex)과 간선(Edge, Link) 을 사용합니다. 정점은 단순히 정보를 담을 수도 있고 상태를 담을 수도 있습니다. 간선은 정보나 상태를 연결합니다. 거리, 비용 등 가중치(Weight)를 표시할 수 있습니다. tree Graph 중에서도 특정 조건을 만족하는 자료구조입니다. 흔히 수학에서는 수형도 라는 표현으로 사용하기도 합니다. 트리는 계층 구조를 가진 데이터에서 많이 사용합니다. 가계부, 조직도 등등의 용도가 있습니다. 개발에서는 디렉토리 구조, json 파일, NoSQL 등의 예시도 있습니다. 부모 노드(Parent node) : 노드의 직접적인 상위 노드 자식 노드(Child node) : 노드의 직접적인 하위 노드 조상 노드(Ancestor node) : 노드의 부모, 부모의 부모 등 노드의 상위 노드 후손 노드(Descendant node) : 노드의 자식, 자식의 자식 등 노드의 하위 노드 root : 트리의 꼭대기 노드 (부모노드 없음) leaf : 트리의 맨 밑 노드 (자식노드 없음) Array vs Linked List Array 가장 기본적인 자료구조인 Array 자료구조는, 논리적 저장 순서와 물리적 저장 순서가 일치한다. 따라서 인덱스(index)로 해당 원소(element)에 접근할 수 있다. 하지만 삭제 또는 삽입의 과정에서는 해당 원소에 접근하여 작업을 완료한 뒤(O(1)), 또 한 가지의 작업을 추가적으로 해줘야 하기 때문에, 시간이 더 걸린다. 만약 배열의 원소 중 어느 원소를 삭제했다고 했을 때, 배열의 연속적인 특징이 깨지게 된다. 즉 빈 공간이 생기는 것이다. 따라서 삭제한 원소보다 큰 인덱스를 갖는 원소들을 shift해줘야 하는 비용(cost)이 발생하고 이 경우의 시간 복잡도는 O(n)가 된다. 그렇기 때문에 Array 자료구조에서 삭제 기능에 대한 time complexity 의 worst case 는 O(n)이 된다. 삽입의 경우도 마찬가지이다. 만약 첫번째 자리에 새로운 원소를 추가하고자 한다면 모든 원소들의 인덱스를 1 씩 shift 해줘야 하므로 이 경우도 O(n)의 시간을 요구하게 된다. Linked List 이 부분에 대한 문제점을 해결하기 위한 자료구조가 linked list 이다. 각각의 원소들은 자기 자신 다음에 어떤 원소인지만을 기억하고 있다. 따라서 이 부분만 다른 값으로 바꿔주면 삭제와 삽입을 O(1) 만에 해결할 수 있는 것이다. 하지만 Linked List 역시 한 가지 문제가 있다. 원하는 위치에 삽입을 하고자 하면 원하는 위치를 Search 과정에 있어서 첫번째 원소부터 다 확인해봐야 한다는 것이다. Array 와는 달리 논리적 저장 순서와 물리적 저장 순서가 일치하지 않기 때문이다. 이것은 일단 삽입하고 정렬하는 것과 마찬가지이다. 이 과정 때문에, 어떠한 원소를 삭제 또는 추가하고자 했을 때, 그 원소를 찾기 위해서 O(n)의 시간이 추가적으로 발생하게 된다. 결국 linked list 자료구조는 search 에도 O(n)의 time complexity 를 갖고, 삽입, 삭제에 대해서도 O(n)의 time complexity 를 갖는다. 그렇다고 해서 아주 쓸모없는 자료구조는 아니기에, 우리가 학습하는 것이다. 이 Linked List 는 Tree 구조의 근간이 되는 자료구조이며, Tree 에서 사용되었을 때 그 유용성이 드러난다. 거품 정렬(Bubble Sort) Bubble Sort는 Selection Sort와 유사한 알고리즘으로 서로 인접한 두 원소의 대소를 비교하고, 조건에 맞지 않다면 자리를 교환하며 정렬하는 알고리즘 이다. 장점 구현이 매우 간단하고, 소스코드가 직관적이다. 정렬하고자 하는 배열 안에서 교환하는 방식이므로, 다른 메모리 공간을 필요로 하지 않다. =&gt; 제자리 정렬(in-place sorting) 안정 정렬(Stable Sort) 이다. 단점 시간복잡도가 최악, 최선, 평균 모두 O(n^2)으로, 굉장히 비효율적이다. 정렬 돼있지 않은 원소가 정렬 됐을때의 자리로 가기 위해서, 교환 연산(swap)이 많이 일어나게 된다.","link":"/2020/06/04/TIL-%EB%A9%B4%EC%A0%91-%EC%98%88%EC%83%81-%EC%A7%88%EB%AC%B8/"},{"title":"TIL : 면접 예상 질문","text":"SSH(시큐어 셀) 네트워크 상의 다른 컴퓨터에 로그인 하거나 원격 시스템에서 명령을 실행하고 다른 시스템으로 파일을 복사할 수 있도록 해주는 응용 프로그램 또는 그 프로토콜 데이터 전송 ex) 깃허브 푸쉬할 때 원격 제어 ex) AWS 인스턴스 서버에 접속하여 해당 머신에 명령을 내리기 위해 SSH를 사용하는 이유 ==&gt; “보안” =&gt; Private Key(암호화된 메시지를 복호화) / Public Key(암호화가능, 복호화는 불가) HTTP / HTTPS HTTP : 웹브라우저와 서버간의 웹페이지와 같은 자원을 주고 받을 때 쓰는 통신 규약 HTTPS : HTTP + SSL프로토콜 =&gt; 보안이 강화된 HTTP CA업체를 통하여 인증서(Private Key)를 발급 받음 ex) Let’s Encrypt 보안(권한, 개인키)페이징 로직에 대한 이해Serverless클라우드 접근 권한에 대한 이해S3와 같은 외부데이터 저장소화 내부 파일 시스템의 차이Docker / Kubernetes Docker : 컨테이너 기반의 오픈소스 가상화 플랫폼 다양한 프로그램, 실행환경을 컨테이너로 추상화하고 동일한 인터페이스를 제공하여 프로그램의 배포 및 관리를 단순화해줌 기종의 가상화 방식은 OS를 가상화함 =&gt; 무겁고 느림 도커는 하나의 서버에 어려개의 컨테이너는 사용 =&gt; 서로 영향을 미치지 않으며, 독립적으로 실행 가능 Image : 컨테이너 실행에 필요한 파일과 설정값 등을 포함하고 있음 레이어 저장 방식을 사용함 Kubernetes : CI/CD CI : 지속적 통합 = build / test CD : 지속적 제공,배포 = deploy 스케일 업과 스케일 아웃에 대한 차이 이해 스케일 아웃 : 서버를 여러대 추가하여 시스템ㅇ르 확장하는 방법 부하를 균등하게 해주는 “로드벨런싱”이 필수 장점 : 서버 한대가 다운되면 다른 서버로 서비스 제공 가능 단점 : 모든 서버가 동일한 데이터를 가지고 있어야 함 데이터 변화가 적은 “웹서버”에 적합 스케일 업 : 서버에 CPU나 RAM를 추가하거나 고성능의 부품, 서버로 교체하는 방법 서버 한대에 모든 부하가 집중 데이터베이스 서버에 적합한 방식 로드 벨런서프록시 서버에 대한 이해TDD(테스트 주도 개발)Agile 개발 방식캐시컴퓨터 과학에서 데이터나 값을 미리 복사해 놓은 임시 장소를 가리킨다. 캐시는 캐시의 접근 시간에 비해 원래 데이터를 접근하는 시간이 오래 걸리는 경우나 값을 다시 계산하는 시간을 절약하고 싶은 경우에 사용","link":"/2020/06/04/TIL-%E1%84%86%E1%85%A7%E1%86%AB%E1%84%8C%E1%85%A5%E1%86%B8-%E1%84%8B%E1%85%A8%E1%84%89%E1%85%A1%E1%86%BC-%E1%84%8C%E1%85%B5%E1%86%AF%E1%84%86%E1%85%AE%E1%86%AB/"},{"title":"TIL - 20200618","text":"자바 객체 지향적 설계와 구조를 정확히 표현하는 것에 특화된 언어 ex) 상속, 인터페이스 변수 - 이름표 자료형 함수 - 명령들을 보관하는 역할 입력값(파라미터, 매개변수)을 넣은 후, 그 값을 사용하여 필요한 동작을 하고 출력값(리턴값)을 만들어 냄 배열 - 여러개의 값을 하나의 변수에 담고 싶을 때 사용 코멘트 컴파일 언어 Vs 인터프리터(스크립트) 언어 컴파일 언어 ex) C, C++, Java, C#, Go 컴파일러를 거쳐서 머신코드로 변경되고 실햄됨 개발은 오래걸리지만, 실행되는 속도가 빠르다. Java) 소스코드(.java) ==&gt; 자바 컴파일 ==&gt; 바이코드(.class) ==&gt; JVM의 JIT컴파일러 ==&gt; 머신코드 ==&gt; 실행 인터프리터(스크립트) 언어 ex) Python, Ruby, Perl, PHP, JavaScript 코드를 한줄씩 번역하고 실행하는 방식 소스코드(스크립트) ==&gt; 인터프리터 ==&gt; 실행 I/O(Input / Output) : 입출력Non-blocking 어떤 쓰레드에서 오류가 발행하거나 멈추었을 때, 다른 쓰레드에게 영향을 끼치지 않도록 만드는 방법 ** 쓰레드 : 어떠한 프로그램 내에서, 특히 프로세스 내에서 실행되는 흐름의 단위 Non-blocking I/O 입출력 처리는 시작만 해둔 채 완료되지 않은 상태에서 다른 처리 작업을 계속 진행할 수 있도록 멈추지 않고 입출력 처리를 기다리는 방법 시스템 자원을 효율적으로 사용하기 위해서 SPA(Single Page Application) 싱글 페이지 애플리케이션은 서버로부터 완전한 새로운 페이지를 불러오지 않고 현재의 페이지를 동적으로 다시 작성함으로써 사용자와 소통하는 웹 애플리케이션이나 웹사이트를 말한다.","link":"/2020/06/18/TIL-20200618/"}],"tags":[{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"Django","slug":"Django","link":"/tags/Django/"},{"name":"TIL","slug":"TIL","link":"/tags/TIL/"},{"name":"Interview","slug":"Interview","link":"/tags/Interview/"}],"categories":[{"name":"Side Project","slug":"Side-Project","link":"/categories/Side-Project/"},{"name":"Lotto","slug":"Side-Project/Lotto","link":"/categories/Side-Project/Lotto/"},{"name":"TIL","slug":"TIL","link":"/categories/TIL/"},{"name":"Interview","slug":"TIL/Interview","link":"/categories/TIL/Interview/"}]}