{"pages":[],"posts":[{"title":"lotto : 사이드프로젝트 시작!","text":"사이드 프로젝트 시작!","link":"/2020/05/27/lotto-%E1%84%89%E1%85%A1%E1%84%8B%E1%85%B5%E1%84%83%E1%85%B3%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A6%E1%86%A8%E1%84%90%E1%85%B3-%E1%84%89%E1%85%B5%E1%84%8C%E1%85%A1%E1%86%A8/"},{"title":"TIL : 면접 예상 질문","text":"SSH(시큐어 셀) 네트워크 상의 다른 컴퓨터에 로그인 하거나 원격 시스템에서 명령을 실행하고 다른 시스템으로 파일을 복사할 수 있도록 해주는 응용 프로그램 또는 그 프로토콜 데이터 전송 ex) 깃허브 푸쉬할 때 원격 제어 ex) AWS 인스턴스 서버에 접속하여 해당 머신에 명령을 내리기 위해 SSH를 사용하는 이유 ==&gt; “보안” =&gt; Private Key(암호화된 메시지를 복호화) / Public Key(암호화가능, 복호화는 불가) HTTP / HTTPS HTTP : 웹브라우저와 서버간의 웹페이지와 같은 자원을 주고 받을 때 쓰는 통신 규약 HTTPS : HTTP + SSL프로토콜 =&gt; 보안이 강화된 HTTP CA업체를 통하여 인증서(Private Key)를 발급 받음 ex) Let’s Encrypt 프로토콜컴퓨터끼리 정보를 주고 받기 위한 일종의 규칙이나 약속을 의미 ex) TPC, IP, HTTP, FTP DNS(도메인 네임 시스템)호스트의 도메인 이름을 호스트이 네트워크 주소로 바꾸거나 그 반대의 변황르 수행 할 수 있도록 하기 위해 개발되었다. 특정 컴퓨터의 주소를 찾기 위해, 사람이 이해하기 쉬운 도메인 이름을 숫자로 된 식별 번호로 변환해 준다. 보안(권한, 개인키)페이징 로직에 대한 이해Serverless클라우드 접근 권한에 대한 이해S3와 같은 외부데이터 저장소화 내부 파일 시스템의 차이Docker / Kubernetes Docker : 컨테이너 기반의 오픈소스 가상화 플랫폼 다양한 프로그램, 실행환경을 컨테이너로 추상화하고 동일한 인터페이스를 제공하여 프로그램의 배포 및 관리를 단순화해줌 기종의 가상화 방식은 OS를 가상화함 =&gt; 무겁고 느림 도커는 하나의 서버에 어려개의 컨테이너는 사용 =&gt; 서로 영향을 미치지 않으며, 독립적으로 실행 가능 Image : 컨테이너 실행에 필요한 파일과 설정값 등을 포함하고 있음 레이어 저장 방식을 사용함 Kubernetes : 컨테이너를 쉽고 빠르게 배포/확장하고 관리를 자동화해주는 오픈소스 플랫폼 CI/CD CI : 지속적 통합 = build / test CD : 지속적 제공/배포 = deploy 스케일 업과 스케일 아웃에 대한 차이 이해 스케일 아웃 : 서버를 여러대 추가하여 시스템ㅇ르 확장하는 방법 부하를 균등하게 해주는 “로드벨런싱”이 필수 장점 : 서버 한대가 다운되면 다른 서버로 서비스 제공 가능 단점 : 모든 서버가 동일한 데이터를 가지고 있어야 함 데이터 변화가 적은 “웹서버”에 적합 스케일 업 : 서버에 CPU나 RAM를 추가하거나 고성능의 부품, 서버로 교체하는 방법 서버 한대에 모든 부하가 집중 데이터베이스 서버에 적합한 방식 로드 벨런서 로드밸런서는 서버에 가해지는 부하(=로드)를 분산(=밸런싱)해주는 장치 또는 기술을 통칭합니다. 클라이언트와 서버풀(Server Pool, 분산 네트워크를 구성하는 서버들의 그룹) 사이에 위치하며, 한 대의 서버로 부하가 집중되지 않도록 트래픽을 관리해 각각의 서버가 최적의 퍼포먼스를 보일 수 있도록 합니다. 라운드로빈 방식(Round Robin Method) 가중 라운드로빈 방식(Weighted Round Robin Method) IP 해시 방식(IP Hash Method) 최소 연결 방식(Least Connection Method) 최소 리스폰타임(Least Response Time Method) 프록시 서버에 대한 이해 클라이언트와 서버 사이에서 데이터를 전달해 주는 서버. 웹 캐시 기능이 있는 경우가 많으며, 방식에 따라 클라이언트의 [IP 주소](https://namu.wiki/w/IP 주소)가 서버에게 노출될 수도 있고 아닐 수도 있다. 설치 목적은 웹서핑을 비롯한 인터넷 속도 향상 TDD(테스트 주도 개발)Agile 개발 방식캐시컴퓨터 과학에서 데이터나 값을 미리 복사해 놓은 임시 장소를 가리킨다. 캐시는 캐시의 접근 시간에 비해 원래 데이터를 접근하는 시간이 오래 걸리는 경우나 값을 다시 계산하는 시간을 절약하고 싶은 경우에 사용 Cookie &amp; Session Cookie Session 저장위치 Client Server 저장형식 Text Object 만료시점 쿠키 저장시 설정 (설정 없으면 브라우저 종료 시) 정확한 시점 모름 리소스 클라이언트의 리소스 서버의 리소스 용량제한 한 도메인 당 20개, 한 쿠키당 4KB 제한없음 URI과 URL URI에는 URL,URN이 포함되어 있다. URL은 URI이지만, URI는 URL이 아니다. URL은 인터넷 상의 자원 위치를 나타냄 URI는 인터넷 상의 자원을 식별하기 위한 문자열의 구성 REST API 첫 번째, URI는 정보의 자원을 표현해야 한다. 두 번째, 자원에 대한 행위는 HTTP Method(GET, POST, PUT, DELETE)로 표현한다. 자료구조 자료구조는 효율적인 접근 및 수정을 가능케 하는 자료의 조직, 관리, 저장 하기 위해 사용하는 추상적인 개념입니다. 자료는 보통 수와 문자를 다루며, 이런 자료를 구조화 시킨 것이 자료 구조입니다. stack LIFO(Last In, First Out) : 후입선출 항상 가장 상위 원소를 호출하거나 삭제하므로 가장 먼저 들어온 것이 가장 나중에 나오는 선입후출 구조를 가지고 있습니다. undo, 되돌리기 (Ctrl+Z) 후위표기법(postfix notation) 수식 계산 괄호 체크 메모리 연산, 재귀함수 호출 queue &amp; deque FIFO (First In, First Out) : 선입선출 가장 먼저 들어온 것이 가장 먼저 나오는 선입선출 구조를 가지고 있습니다. OS Scheduling 우선순위가 같은 작업 (Print) 메시지 큐(Mesage Queue) deque = stack + queue graph 관계를 표현하기 위해 필요하고 사용하는 자료구조입니다. 이런 그래프는 관계 표현을 위해 정점(Node, Vertex)과 간선(Edge, Link) 을 사용합니다. 정점은 단순히 정보를 담을 수도 있고 상태를 담을 수도 있습니다. 간선은 정보나 상태를 연결합니다. 거리, 비용 등 가중치(Weight)를 표시할 수 있습니다. tree Graph 중에서도 특정 조건을 만족하는 자료구조입니다. 흔히 수학에서는 수형도 라는 표현으로 사용하기도 합니다. 트리는 계층 구조를 가진 데이터에서 많이 사용합니다. 가계부, 조직도 등등의 용도가 있습니다. 개발에서는 디렉토리 구조, json 파일, NoSQL 등의 예시도 있습니다. 부모 노드(Parent node) : 노드의 직접적인 상위 노드 자식 노드(Child node) : 노드의 직접적인 하위 노드 조상 노드(Ancestor node) : 노드의 부모, 부모의 부모 등 노드의 상위 노드 후손 노드(Descendant node) : 노드의 자식, 자식의 자식 등 노드의 하위 노드 root : 트리의 꼭대기 노드 (부모노드 없음) leaf : 트리의 맨 밑 노드 (자식노드 없음)","link":"/2020/06/04/TIL-%EB%A9%B4%EC%A0%91-%EC%98%88%EC%83%81-%EC%A7%88%EB%AC%B8/"},{"title":"TIL : 면접 예상 질문","text":"SSH(시큐어 셀) 네트워크 상의 다른 컴퓨터에 로그인 하거나 원격 시스템에서 명령을 실행하고 다른 시스템으로 파일을 복사할 수 있도록 해주는 응용 프로그램 또는 그 프로토콜 데이터 전송 ex) 깃허브 푸쉬할 때 원격 제어 ex) AWS 인스턴스 서버에 접속하여 해당 머신에 명령을 내리기 위해 SSH를 사용하는 이유 ==&gt; “보안” =&gt; Private Key(암호화된 메시지를 복호화) / Public Key(암호화가능, 복호화는 불가) HTTP / HTTPS HTTP : 웹브라우저와 서버간의 웹페이지와 같은 자원을 주고 받을 때 쓰는 통신 규약 HTTPS : HTTP + SSL프로토콜 =&gt; 보안이 강화된 HTTP CA업체를 통하여 인증서(Private Key)를 발급 받음 ex) Let’s Encrypt 보안(권한, 개인키)페이징 로직에 대한 이해Serverless클라우드 접근 권한에 대한 이해S3와 같은 외부데이터 저장소화 내부 파일 시스템의 차이Docker / Kubernetes Docker : 컨테이너 기반의 오픈소스 가상화 플랫폼 다양한 프로그램, 실행환경을 컨테이너로 추상화하고 동일한 인터페이스를 제공하여 프로그램의 배포 및 관리를 단순화해줌 기종의 가상화 방식은 OS를 가상화함 =&gt; 무겁고 느림 도커는 하나의 서버에 어려개의 컨테이너는 사용 =&gt; 서로 영향을 미치지 않으며, 독립적으로 실행 가능 Image : 컨테이너 실행에 필요한 파일과 설정값 등을 포함하고 있음 레이어 저장 방식을 사용함 Kubernetes : CI/CD CI : 지속적 통합 = build / test CD : 지속적 제공,배포 = deploy 스케일 업과 스케일 아웃에 대한 차이 이해 스케일 아웃 : 서버를 여러대 추가하여 시스템ㅇ르 확장하는 방법 부하를 균등하게 해주는 “로드벨런싱”이 필수 장점 : 서버 한대가 다운되면 다른 서버로 서비스 제공 가능 단점 : 모든 서버가 동일한 데이터를 가지고 있어야 함 데이터 변화가 적은 “웹서버”에 적합 스케일 업 : 서버에 CPU나 RAM를 추가하거나 고성능의 부품, 서버로 교체하는 방법 서버 한대에 모든 부하가 집중 데이터베이스 서버에 적합한 방식 로드 벨런서프록시 서버에 대한 이해TDD(테스트 주도 개발)Agile 개발 방식캐시컴퓨터 과학에서 데이터나 값을 미리 복사해 놓은 임시 장소를 가리킨다. 캐시는 캐시의 접근 시간에 비해 원래 데이터를 접근하는 시간이 오래 걸리는 경우나 값을 다시 계산하는 시간을 절약하고 싶은 경우에 사용","link":"/2020/06/04/TIL-%E1%84%86%E1%85%A7%E1%86%AB%E1%84%8C%E1%85%A5%E1%86%B8-%E1%84%8B%E1%85%A8%E1%84%89%E1%85%A1%E1%86%BC-%E1%84%8C%E1%85%B5%E1%86%AF%E1%84%86%E1%85%AE%E1%86%AB/"}],"tags":[{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"Django","slug":"Django","link":"/tags/Django/"},{"name":"TIL","slug":"TIL","link":"/tags/TIL/"},{"name":"Interview","slug":"Interview","link":"/tags/Interview/"}],"categories":[{"name":"Side Project","slug":"Side-Project","link":"/categories/Side-Project/"},{"name":"Lotto","slug":"Side-Project/Lotto","link":"/categories/Side-Project/Lotto/"},{"name":"TIL","slug":"TIL","link":"/categories/TIL/"},{"name":"Interview","slug":"TIL/Interview","link":"/categories/TIL/Interview/"}]}